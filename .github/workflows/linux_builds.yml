name: üêß Linux Builds
on:
  push:
    branches: [ master, main ]

# Global Settings
env:
  PROJECT_FOLDER: gdnative_cpp_example
  EXPORT_FOLDER: gdnative_cpp_example/demo/bin/x11

jobs:
  linux-compilation:
    name: Linux Compilation
    runs-on: "ubuntu-20.04"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          lfs: true
          submodules: recursive

      # Install all packages (except scons)
      - name: Configure dependencies
        run: |
          sudo apt-get install build-essential pkg-config libx11-dev libxcursor-dev \
            libxinerama-dev libgl1-mesa-dev libglu-dev libasound2-dev libpulse-dev libudev-dev libxi-dev libxrandr-dev yasm

      # Upload cache on completion and check it out now
      - name: Load .scons_cache directory
        id: linux-compilation-cache
        uses: actions/cache@v2
        with:
          path: ${{github.workspace}}/.scons_cache/
          key: ${{github.job}}-${{github.ref}}-${{github.sha}}
          restore-keys: |
            ${{github.job}}-${{github.ref}}-${{github.sha}}
            ${{github.job}}-${{github.ref}}
            ${{github.job}}

      # Use python 3.x release (works cross platform; best to keep self contained in it's own step)
      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          # Semantic version range syntax or exact version of a Python version
          python-version: '3.x'
          # Optional - x64 or x86 architecture, defaults to x64
          architecture: 'x64'

      # Setup scons, print python version and scons version info, so if anything is broken it won't run the build.
      - name: Configuring Python packages
        run: |
          python -c "import sys; print(sys.version)"
          python -m pip install scons
          python --version
          scons --version

      - name: Compilation
        env:
          SCONS_CACHE: ${{github.workspace}}/.scons_cache/
        run: |
          mkdir -v -p ${{env.EXPORT_FOLDER}}
          cd ${{env.PROJECT_FOLDER}}
          cd godot-cpp
          scons platform=linux bits=64 target=debug generate_bindings=yes -j4
          cd ..
          scons platform=linux

      - name: Upload Artifact
        uses: actions/upload-artifact@v1
        with:
          name: linux
          path: ${{env.EXPORT_FOLDER}}